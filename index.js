

const fs = require('fs');
const { WriteStream } = require('fs');

/*---------------------------------------------------*/

// Read the voxel file
var map = "";

if(process.argv.length<3){
    console.log("Convert voxel maps in txt format (such has the ones generated by gopixel) to Quake format");
    console.log("The quake format is optimized to be ingested by Trenchbroom. Might not load in other map editor."); 
    console.log("\nUsage:")
    console.log("node index.js <relative pathfile>");
    return;
}

// Configure map 
map = process.argv[2];


console.log("Processing '"+ map + "' into 'maps/final.map'...");

/*---------------------------------------------------*/

// Consts 
const TAB = "    ";
const CR = "\n";

// Read the text file
const fileContents = fs.readFileSync(map, 'utf-8');
const lines = fileContents.split('\n');

var global_brush_index = 0;
var out = [];

// Process each line
lines.forEach((line) => {
    // Process the current line
    if(line.charAt(0)=="#")
        return;

    let parts = line.split(" ");
    let x = parts[0];
    let y = parts[1];
    let z = parts[2];
    let color = parts[3];

    if( out[x] == undefined ) 
        out[x] = [];
    if( out[x][y] == undefined ) 
        out[x][y] = [];


    out[x][y][z] = color;
});

class MapWritter extends WriteStream {    

    constructor(path, options) {
        super(path, options);
        this.map = null;

        this.simplecubevalues1 = [ -64, -64, -16 , -64 ,-63 ,-16 ,-64, -64, -15 ];
        this.simplecubevalues2 = [ -64 ,-64, -16 , -64 ,-64, -15 , -63 ,-64 ,-16 ];
        this.simplecubevalues3 = [ -64 ,-64, -16 ,-63 ,-64, -16 ,-64 ,-63, -16 ];
        this.simplecubevalues4 = [ 64, 64, 96 , 64, 65, 96 , 65, 64 ,96];
        this.simplecubevalues5 = [ 64, 64, 16, 65, 64, 16, 64, 64, 17];
        this.simplecubevalues6 = [ 64, 64, 16, 64, 64, 17, 64, 65, 16];
    }

    writeln(){
        this.write("\n");
    }

    startMap(){
        this.write("// Game: Quake\n");
        this.write("// Format: Valve\n")
        this.write("// entity 0\n")
        this.write("{\n")

        this.write(TAB+"\"mapversion\" \"220\"\n");
        this.write(TAB+"\"classname\" \"worldspawn\"\n");
        this.write(TAB+'"_sunlight" "200"'+CR);
        this.write(TAB+'"_sun_mangle" "260 -45 0"'+CR);
        this.write(TAB+'"_sunlight2" "190"'+CR);
        this.write(TAB+'"_sunlight2_color" "1 1 1"'+CR);
    };

    endMap(){
        this.write("}\n");
        this.end();
    } 

    deltaMe(x,y,z,data){     
        if(x){
            data[0] = data[0] + x * 128;
            data[3] = data[3] + x * 128;
            data[6] = data[6] + x * 128;
        }

        if(y){
            data[1] = data[1] + y * 128;
            data[4] = data[4] + y * 128;
            data[7] = data[7] + y * 128;
        }

        if(z){
            data[2] = data[2] + z * 112;
            data[5] = data[5] + z * 112;
            data[8] = data[8] + z * 112;
        }

        return data;
    }

    writeCell(x,y,z){
        if( x === undefined || x === "" || y=== undefined || y === "" || z===undefined || z===""){
            return ;            
        }

        let color = this.map[x][y][z];

        this.write(TAB+`// brush ${global_brush_index}\n`);
        global_brush_index++;

        this.write(TAB+"{\n");

        let  v1 = this.deltaMe(x,y,z,Array.from(this.simplecubevalues1));
        this.write(TAB+TAB+`( ${v1[0]} ${v1[1]} ${v1[2]} ) `);
        this.write(`( ${v1[3]} ${v1[4]} ${v1[5]} ) `);
        this.write(`( ${v1[6]} ${v1[7]} ${v1[8]} ) `);
        this.write(`__TB_empty `);
        this.write(`[ 0 -1 0 0 ] [ 0 0 -1 0 ] 0 1 1 `);
        this.writeln();

        v1 = this.deltaMe(x,y,z,Array.from(this.simplecubevalues2));
        this.write(TAB+TAB+`( ${v1[0]} ${v1[1]} ${v1[2]} ) `);
        this.write(`( ${v1[3]} ${v1[4]} ${v1[5]} ) `);
        this.write(`( ${v1[6]} ${v1[7]} ${v1[8]} ) `);
        this.write(`__TB_empty `);
        this.write(`[ 1 0 0 0 ] [ 0 0 -1 0 ] 0 1 1 `);
        this.writeln();

        v1 = this.deltaMe(x,y,z,Array.from(this.simplecubevalues3));
        this.write(TAB+TAB+`( ${v1[0]} ${v1[1]} ${v1[2]} ) `);
        this.write(`( ${v1[3]} ${v1[4]} ${v1[5]} ) `);
        this.write(`( ${v1[6]} ${v1[7]} ${v1[8]} ) `);
        this.write(`__TB_empty `);
        this.write(`[ -1 0 0 0 ] [ 0 -1 0 0 ] 0 1 1 `);
        this.writeln();

        v1 = this.deltaMe(x,y,z,Array.from(this.simplecubevalues4));
        this.write(TAB+TAB+`( ${v1[0]} ${v1[1]} ${v1[2]} ) `);
        this.write(`( ${v1[3]} ${v1[4]} ${v1[5]} ) `);
        this.write(`( ${v1[6]} ${v1[7]} ${v1[8]} ) `);
        this.write(`__TB_empty `);
        this.write(`[ 1 0 0 0 ] [ 0 -1 0 0 ] 0 1 1 `);
        this.writeln();

        v1 = this.deltaMe(x,y,z,Array.from(this.simplecubevalues5));
        this.write(TAB+TAB+`( ${v1[0]} ${v1[1]} ${v1[2]} ) `);
        this.write(`( ${v1[3]} ${v1[4]} ${v1[5]} ) `);
        this.write(`( ${v1[6]} ${v1[7]} ${v1[8]} ) `);
        this.write(`__TB_empty `);
        this.write(`[ -1 0 0 0 ] [ 0 0 -1 0 ] 0 1 1 `);
        this.writeln();

        v1 = this.deltaMe(x,y,z,Array.from(this.simplecubevalues6));
        this.write(TAB+TAB+`( ${v1[0]} ${v1[1]} ${v1[2]} ) `);
        this.write(`( ${v1[3]} ${v1[4]} ${v1[5]} ) `);
        this.write(`( ${v1[6]} ${v1[7]} ${v1[8]} ) `);
        this.write(`__TB_empty `);
        this.write(`[ 0 1 0 0 ] [ 0 0 -1 0 ] 0 1 1 `);
        this.writeln();

        this.write("\t}\n");
    }
    
}


const output = new MapWritter("maps/final.map");
output.map = out;
output.startMap();

for (let x in output.map) {
    for (let y in output.map[x]) {
      for (let z in output.map[x][y]) {
        output.writeCell(x,y,z);
      }
    }
}

output.endMap();

console.log("Done.");



